[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://cej1ldywa62pw"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_li8fh"]
input_name = "color"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_povxq"]
output_port_for_preview = 0
parameter_name = "Color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_m53vi"]
parameter_name = "Enabled"
default_value_enabled = true

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_7y45l"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool Enabled = false;
uniform vec4 Color : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);



void fragment() {
// BooleanParameter:4
	bool n_out4p0 = Enabled;


// ColorParameter:3
	vec4 n_out3p0 = Color;


// Input:2
	vec4 n_out2p0 = COLOR;


	vec3 n_out5p0;
// If:5
	float n_in5p1 = 1.00000;
	float n_in5p2 = 0.00001;
	if(abs((n_out4p0 ? 1.0 : 0.0) - n_in5p1) < n_in5p2)
	{
		n_out5p0 = vec3(n_out3p0.xyz);
	}
	else if((n_out4p0 ? 1.0 : 0.0) < n_in5p1)
	{
		n_out5p0 = vec3(n_out2p0.xyz);
	}
	else
	{
		n_out5p0 = vec3(n_out2p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1260, 460)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_li8fh")
nodes/fragment/2/position = Vector2(180, 1080)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorParameter_povxq")
nodes/fragment/3/position = Vector2(220, 480)
nodes/fragment/4/node = SubResource("VisualShaderNodeBooleanParameter_m53vi")
nodes/fragment/4/position = Vector2(220, 180)
nodes/fragment/5/node = SubResource("VisualShaderNodeIf_7y45l")
nodes/fragment/5/position = Vector2(820, 520)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 3, 0, 5, 3, 2, 0, 5, 4, 2, 0, 5, 5, 5, 0, 0, 0)
